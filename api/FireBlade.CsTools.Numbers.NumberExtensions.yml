### YamlMime:ManagedReference
items:
- uid: FireBlade.CsTools.Numbers.NumberExtensions
  commentId: T:FireBlade.CsTools.Numbers.NumberExtensions
  id: NumberExtensions
  parent: FireBlade.CsTools.Numbers
  children:
  - FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,FireBlade.CsTools.Numbers.Range{``0})
  - FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,System.Decimal,System.Decimal)
  - FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,System.Double,System.Double)
  - FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,System.Int32,System.Int32)
  - FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,System.Single,System.Single)
  - FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,``0,``0)
  langs:
  - csharp
  - vb
  name: NumberExtensions
  nameWithType: NumberExtensions
  fullName: FireBlade.CsTools.Numbers.NumberExtensions
  type: Class
  source:
    remote:
      path: CsTools/Numbers/NumberExtensions.cs
      branch: main
      repo: https://github.com/FireBlade211/CsTools.git
    id: NumberExtensions
    path: ../CsTools/Numbers/NumberExtensions.cs
    startLine: 7
  assemblies:
  - CsTools
  namespace: FireBlade.CsTools.Numbers
  summary: Extends number types such as <xref href="System.Int32" data-throw-if-not-resolved="false"></xref>, <xref href="System.Single" data-throw-if-not-resolved="false"></xref>, or <xref href="System.Double" data-throw-if-not-resolved="false"></xref>.
  example: []
  syntax:
    content: public static class NumberExtensions
    content.vb: Public Module NumberExtensions
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
- uid: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,``0,``0)
  commentId: M:FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,``0,``0)
  id: IsInRange``1(``0,``0,``0)
  isExtensionMethod: true
  parent: FireBlade.CsTools.Numbers.NumberExtensions
  langs:
  - csharp
  - vb
  name: IsInRange<TNum>(TNum, TNum, TNum)
  nameWithType: NumberExtensions.IsInRange<TNum>(TNum, TNum, TNum)
  fullName: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange<TNum>(TNum, TNum, TNum)
  type: Method
  source:
    remote:
      path: CsTools/Numbers/NumberExtensions.cs
      branch: main
      repo: https://github.com/FireBlade211/CsTools.git
    id: IsInRange
    path: ../CsTools/Numbers/NumberExtensions.cs
    startLine: 18
  assemblies:
  - CsTools
  namespace: FireBlade.CsTools.Numbers
  summary: Checks if the specified number is in a range.
  example: []
  syntax:
    content: 'public static bool IsInRange<TNum>(this TNum val, TNum min, TNum max) where TNum : INumber<TNum>'
    parameters:
    - id: val
      type: '{TNum}'
      description: The value to test.
    - id: min
      type: '{TNum}'
      description: The minimum value of the range.
    - id: max
      type: '{TNum}'
      description: The maximum value of the range.
    typeParameters:
    - id: TNum
      description: The number type.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the value is in range; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Function IsInRange(Of TNum As INumber(Of TNum))(val As TNum, min As TNum, max As TNum) As Boolean
  overload: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The minimum value is larger than the maximum value.
  nameWithType.vb: NumberExtensions.IsInRange(Of TNum)(TNum, TNum, TNum)
  fullName.vb: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange(Of TNum)(TNum, TNum, TNum)
  name.vb: IsInRange(Of TNum)(TNum, TNum, TNum)
- uid: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,System.Int32,System.Int32)
  commentId: M:FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,System.Int32,System.Int32)
  id: IsInRange``1(``0,System.Int32,System.Int32)
  isExtensionMethod: true
  parent: FireBlade.CsTools.Numbers.NumberExtensions
  langs:
  - csharp
  - vb
  name: IsInRange<TNum>(TNum, int, int)
  nameWithType: NumberExtensions.IsInRange<TNum>(TNum, int, int)
  fullName: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange<TNum>(TNum, int, int)
  type: Method
  source:
    remote:
      path: CsTools/Numbers/NumberExtensions.cs
      branch: main
      repo: https://github.com/FireBlade211/CsTools.git
    id: IsInRange
    path: ../CsTools/Numbers/NumberExtensions.cs
    startLine: 35
  assemblies:
  - CsTools
  namespace: FireBlade.CsTools.Numbers
  summary: Checks if the specified number is in a range.
  example: []
  syntax:
    content: 'public static bool IsInRange<TNum>(this TNum val, int min, int max) where TNum : INumber<TNum>'
    parameters:
    - id: val
      type: '{TNum}'
      description: The value to test.
    - id: min
      type: System.Int32
      description: The minimum value of the range.
    - id: max
      type: System.Int32
      description: The maximum value of the range.
    typeParameters:
    - id: TNum
      description: The number type.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the value is in range; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Function IsInRange(Of TNum As INumber(Of TNum))(val As TNum, min As Integer, max As Integer) As Boolean
  overload: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The minimum value is larger than the maximum value.
  nameWithType.vb: NumberExtensions.IsInRange(Of TNum)(TNum, Integer, Integer)
  fullName.vb: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange(Of TNum)(TNum, Integer, Integer)
  name.vb: IsInRange(Of TNum)(TNum, Integer, Integer)
- uid: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,System.Single,System.Single)
  commentId: M:FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,System.Single,System.Single)
  id: IsInRange``1(``0,System.Single,System.Single)
  isExtensionMethod: true
  parent: FireBlade.CsTools.Numbers.NumberExtensions
  langs:
  - csharp
  - vb
  name: IsInRange<TNum>(TNum, float, float)
  nameWithType: NumberExtensions.IsInRange<TNum>(TNum, float, float)
  fullName: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange<TNum>(TNum, float, float)
  type: Method
  source:
    remote:
      path: CsTools/Numbers/NumberExtensions.cs
      branch: main
      repo: https://github.com/FireBlade211/CsTools.git
    id: IsInRange
    path: ../CsTools/Numbers/NumberExtensions.cs
    startLine: 49
  assemblies:
  - CsTools
  namespace: FireBlade.CsTools.Numbers
  summary: Checks if the specified number is in a range.
  example: []
  syntax:
    content: 'public static bool IsInRange<TNum>(this TNum val, float min, float max) where TNum : INumber<TNum>'
    parameters:
    - id: val
      type: '{TNum}'
      description: The value to test.
    - id: min
      type: System.Single
      description: The minimum value of the range.
    - id: max
      type: System.Single
      description: The maximum value of the range.
    typeParameters:
    - id: TNum
      description: The number type.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the value is in range; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Function IsInRange(Of TNum As INumber(Of TNum))(val As TNum, min As Single, max As Single) As Boolean
  overload: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The minimum value is larger than the maximum value.
  nameWithType.vb: NumberExtensions.IsInRange(Of TNum)(TNum, Single, Single)
  fullName.vb: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange(Of TNum)(TNum, Single, Single)
  name.vb: IsInRange(Of TNum)(TNum, Single, Single)
- uid: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,System.Double,System.Double)
  commentId: M:FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,System.Double,System.Double)
  id: IsInRange``1(``0,System.Double,System.Double)
  isExtensionMethod: true
  parent: FireBlade.CsTools.Numbers.NumberExtensions
  langs:
  - csharp
  - vb
  name: IsInRange<TNum>(TNum, double, double)
  nameWithType: NumberExtensions.IsInRange<TNum>(TNum, double, double)
  fullName: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange<TNum>(TNum, double, double)
  type: Method
  source:
    remote:
      path: CsTools/Numbers/NumberExtensions.cs
      branch: main
      repo: https://github.com/FireBlade211/CsTools.git
    id: IsInRange
    path: ../CsTools/Numbers/NumberExtensions.cs
    startLine: 63
  assemblies:
  - CsTools
  namespace: FireBlade.CsTools.Numbers
  summary: Checks if the specified number is in a range.
  example: []
  syntax:
    content: 'public static bool IsInRange<TNum>(this TNum val, double min, double max) where TNum : INumber<TNum>'
    parameters:
    - id: val
      type: '{TNum}'
      description: The value to test.
    - id: min
      type: System.Double
      description: The minimum value of the range.
    - id: max
      type: System.Double
      description: The maximum value of the range.
    typeParameters:
    - id: TNum
      description: The number type.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the value is in range; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Function IsInRange(Of TNum As INumber(Of TNum))(val As TNum, min As Double, max As Double) As Boolean
  overload: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The minimum value is larger than the maximum value.
  nameWithType.vb: NumberExtensions.IsInRange(Of TNum)(TNum, Double, Double)
  fullName.vb: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange(Of TNum)(TNum, Double, Double)
  name.vb: IsInRange(Of TNum)(TNum, Double, Double)
- uid: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,System.Decimal,System.Decimal)
  commentId: M:FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,System.Decimal,System.Decimal)
  id: IsInRange``1(``0,System.Decimal,System.Decimal)
  isExtensionMethod: true
  parent: FireBlade.CsTools.Numbers.NumberExtensions
  langs:
  - csharp
  - vb
  name: IsInRange<TNum>(TNum, decimal, decimal)
  nameWithType: NumberExtensions.IsInRange<TNum>(TNum, decimal, decimal)
  fullName: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange<TNum>(TNum, decimal, decimal)
  type: Method
  source:
    remote:
      path: CsTools/Numbers/NumberExtensions.cs
      branch: main
      repo: https://github.com/FireBlade211/CsTools.git
    id: IsInRange
    path: ../CsTools/Numbers/NumberExtensions.cs
    startLine: 77
  assemblies:
  - CsTools
  namespace: FireBlade.CsTools.Numbers
  summary: Checks if the specified number is in a range.
  example: []
  syntax:
    content: 'public static bool IsInRange<TNum>(this TNum val, decimal min, decimal max) where TNum : INumber<TNum>'
    parameters:
    - id: val
      type: '{TNum}'
      description: The value to test.
    - id: min
      type: System.Decimal
      description: The minimum value of the range.
    - id: max
      type: System.Decimal
      description: The maximum value of the range.
    typeParameters:
    - id: TNum
      description: The number type.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the value is in range; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Function IsInRange(Of TNum As INumber(Of TNum))(val As TNum, min As Decimal, max As Decimal) As Boolean
  overload: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The minimum value is larger than the maximum value.
  nameWithType.vb: NumberExtensions.IsInRange(Of TNum)(TNum, Decimal, Decimal)
  fullName.vb: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange(Of TNum)(TNum, Decimal, Decimal)
  name.vb: IsInRange(Of TNum)(TNum, Decimal, Decimal)
- uid: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,FireBlade.CsTools.Numbers.Range{``0})
  commentId: M:FireBlade.CsTools.Numbers.NumberExtensions.IsInRange``1(``0,FireBlade.CsTools.Numbers.Range{``0})
  id: IsInRange``1(``0,FireBlade.CsTools.Numbers.Range{``0})
  isExtensionMethod: true
  parent: FireBlade.CsTools.Numbers.NumberExtensions
  langs:
  - csharp
  - vb
  name: IsInRange<TNum>(TNum, Range<TNum>)
  nameWithType: NumberExtensions.IsInRange<TNum>(TNum, Range<TNum>)
  fullName: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange<TNum>(TNum, FireBlade.CsTools.Numbers.Range<TNum>)
  type: Method
  source:
    remote:
      path: CsTools/Numbers/NumberExtensions.cs
      branch: main
      repo: https://github.com/FireBlade211/CsTools.git
    id: IsInRange
    path: ../CsTools/Numbers/NumberExtensions.cs
    startLine: 90
  assemblies:
  - CsTools
  namespace: FireBlade.CsTools.Numbers
  summary: Checks if the specified number is in a range.
  example: []
  syntax:
    content: 'public static bool IsInRange<TNum>(this TNum val, Range<TNum> range) where TNum : INumber<TNum>'
    parameters:
    - id: val
      type: '{TNum}'
      description: The value to test.
    - id: range
      type: FireBlade.CsTools.Numbers.Range{{TNum}}
      description: The range to check the value against.
    typeParameters:
    - id: TNum
      description: The number type.
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the value is in range; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Shared Function IsInRange(Of TNum As INumber(Of TNum))(val As TNum, range As Range(Of TNum)) As Boolean
  overload: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange*
  exceptions:
  - type: System.ArgumentOutOfRangeException
    commentId: T:System.ArgumentOutOfRangeException
    description: The minimum value is larger than the maximum value.
  nameWithType.vb: NumberExtensions.IsInRange(Of TNum)(TNum, Range(Of TNum))
  fullName.vb: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange(Of TNum)(TNum, FireBlade.CsTools.Numbers.Range(Of TNum))
  name.vb: IsInRange(Of TNum)(TNum, Range(Of TNum))
references:
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: FireBlade.CsTools.Numbers
  commentId: N:FireBlade.CsTools.Numbers
  href: FireBlade.html
  name: FireBlade.CsTools.Numbers
  nameWithType: FireBlade.CsTools.Numbers
  fullName: FireBlade.CsTools.Numbers
  spec.csharp:
  - uid: FireBlade
    name: FireBlade
    href: FireBlade.html
  - name: .
  - uid: FireBlade.CsTools
    name: CsTools
    href: FireBlade.CsTools.html
  - name: .
  - uid: FireBlade.CsTools.Numbers
    name: Numbers
    href: FireBlade.CsTools.Numbers.html
  spec.vb:
  - uid: FireBlade
    name: FireBlade
    href: FireBlade.html
  - name: .
  - uid: FireBlade.CsTools
    name: CsTools
    href: FireBlade.CsTools.html
  - name: .
  - uid: FireBlade.CsTools.Numbers
    name: Numbers
    href: FireBlade.CsTools.Numbers.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  name: Equals(object)
  nameWithType: object.Equals(object)
  fullName: object.Equals(object)
  nameWithType.vb: Object.Equals(Object)
  fullName.vb: Object.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  name: Equals(object, object)
  nameWithType: object.Equals(object, object)
  fullName: object.Equals(object, object)
  nameWithType.vb: Object.Equals(Object, Object)
  fullName.vb: Object.Equals(Object, Object)
  name.vb: Equals(Object, Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.equals#system-object-equals(system-object-system-object)
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  name: GetHashCode()
  nameWithType: object.GetHashCode()
  fullName: object.GetHashCode()
  nameWithType.vb: Object.GetHashCode()
  fullName.vb: Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gethashcode
  - name: (
  - name: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  name: GetType()
  nameWithType: object.GetType()
  fullName: object.GetType()
  nameWithType.vb: Object.GetType()
  fullName.vb: Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.gettype
  - name: (
  - name: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  name: MemberwiseClone()
  nameWithType: object.MemberwiseClone()
  fullName: object.MemberwiseClone()
  nameWithType.vb: Object.MemberwiseClone()
  fullName.vb: Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.memberwiseclone
  - name: (
  - name: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  name: ReferenceEquals(object, object)
  nameWithType: object.ReferenceEquals(object, object)
  fullName: object.ReferenceEquals(object, object)
  nameWithType.vb: Object.ReferenceEquals(Object, Object)
  fullName.vb: Object.ReferenceEquals(Object, Object)
  name.vb: ReferenceEquals(Object, Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.referenceequals
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: ','
  - name: " "
  - uid: System.Object
    name: Object
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object
  - name: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  name: ToString()
  nameWithType: object.ToString()
  fullName: object.ToString()
  nameWithType.vb: Object.ToString()
  fullName.vb: Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.object.tostring
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: System.ArgumentOutOfRangeException
  commentId: T:System.ArgumentOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.argumentoutofrangeexception
  name: ArgumentOutOfRangeException
  nameWithType: ArgumentOutOfRangeException
  fullName: System.ArgumentOutOfRangeException
- uid: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange*
  commentId: Overload:FireBlade.CsTools.Numbers.NumberExtensions.IsInRange
  href: FireBlade.CsTools.Numbers.NumberExtensions.html#FireBlade_CsTools_Numbers_NumberExtensions_IsInRange__1___0___0___0_
  name: IsInRange
  nameWithType: NumberExtensions.IsInRange
  fullName: FireBlade.CsTools.Numbers.NumberExtensions.IsInRange
- uid: '{TNum}'
  commentId: '!:TNum'
  definition: TNum
  name: TNum
  nameWithType: TNum
  fullName: TNum
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: TNum
  name: TNum
  nameWithType: TNum
  fullName: TNum
- uid: System.Decimal
  commentId: T:System.Decimal
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.decimal
  name: decimal
  nameWithType: decimal
  fullName: decimal
  nameWithType.vb: Decimal
  fullName.vb: Decimal
  name.vb: Decimal
- uid: FireBlade.CsTools.Numbers.Range{{TNum}}
  commentId: T:FireBlade.CsTools.Numbers.Range{``0}
  parent: FireBlade.CsTools.Numbers
  definition: FireBlade.CsTools.Numbers.Range`1
  href: FireBlade.CsTools.Numbers.Range-1.html
  name: Range<TNum>
  nameWithType: Range<TNum>
  fullName: FireBlade.CsTools.Numbers.Range<TNum>
  nameWithType.vb: Range(Of TNum)
  fullName.vb: FireBlade.CsTools.Numbers.Range(Of TNum)
  name.vb: Range(Of TNum)
  spec.csharp:
  - uid: FireBlade.CsTools.Numbers.Range`1
    name: Range
    href: FireBlade.CsTools.Numbers.Range-1.html
  - name: <
  - name: TNum
  - name: '>'
  spec.vb:
  - uid: FireBlade.CsTools.Numbers.Range`1
    name: Range
    href: FireBlade.CsTools.Numbers.Range-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TNum
  - name: )
- uid: FireBlade.CsTools.Numbers.Range`1
  commentId: T:FireBlade.CsTools.Numbers.Range`1
  href: FireBlade.CsTools.Numbers.Range-1.html
  name: Range<TNum>
  nameWithType: Range<TNum>
  fullName: FireBlade.CsTools.Numbers.Range<TNum>
  nameWithType.vb: Range(Of TNum)
  fullName.vb: FireBlade.CsTools.Numbers.Range(Of TNum)
  name.vb: Range(Of TNum)
  spec.csharp:
  - uid: FireBlade.CsTools.Numbers.Range`1
    name: Range
    href: FireBlade.CsTools.Numbers.Range-1.html
  - name: <
  - name: TNum
  - name: '>'
  spec.vb:
  - uid: FireBlade.CsTools.Numbers.Range`1
    name: Range
    href: FireBlade.CsTools.Numbers.Range-1.html
  - name: (
  - name: Of
  - name: " "
  - name: TNum
  - name: )
